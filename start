#!/bin/bash

# Container variables. Edit them on your system.
# Name of the user that will execute commands inside the container.
USER_NAME=$USER
# Image that will be used to create the container
IMG_NAME="development:"${1}
# Workspace that will be mapped to container
HOMEWS=$(pwd)"/"${1^}"_Projects/"
# HOMEWS=${2:-$(pwd)"/"${1^}"_Projects/"}
# UID AND GID of the user
USER_UID=`id -u $USER_NAME`
USER_GID=`id -g $USER_NAME`

# If running in a realtime capable kernel, add the realtime group 
if uname -r | grep -q 'rt'; then
  RT_FLAG="--group-add realtime"
else
  RT_FLAG=""
fi

RT_FLAG=""
# If argument 2 is passed, run it. If not, run bash
COMMAND=${2:-bash}

# X routing
xhost +local:root

# Syncronizing configs:
cp -r $(pwd)/dotfiles/. ${HOMEWS}

echo "Using '$USER' as username, with UID=$USER_UID and GUID=$USER_GID"
echo "Mouting host folder '$HOMEWS' to '/home/$USER_NAME/' in the container"

# if nvidia-docker is available then run it
if ! command -v nvidia-docker &> /dev/null
then
    echo "Using 'docker' to run container"
    DOCKER_EXEC=docker
else
    echo "Using 'nvidia-docker' to run container"
    DOCKER_EXEC=nvidia-docker
fi

# Running container
#    --group-add realtime \
$DOCKER_EXEC run -it \
    --rm \
    --privileged \
    --user=$USER_UID:$USER_GID \
    --ipc=host \
    --group-add video \
    --group-add audio \
    --group-add dialout \
    ${RT_FLAG} \
    --ulimit rtprio=99 \
    --ulimit memlock=102400 \
    --cap-add=sys_nice \
    --env="DISPLAY=$DISPLAY" \
    --env="QT_X11_NO_MITSHM=1" \
    --env="ROS_MASTER_URI=$ROS_CONTAINER_MASTER_URI" \
    --env="ROS_IP=$ROS_CONTAINER_IP" \
    --env="TERM=xterm-256color" \
    --volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" \
    --volume="$HOMEWS:/home/$USER_NAME/:rw" \
    --volume="/dev/:/dev/" \
    --volume="/etc/udev/:/etc/udev/" \
    --workdir="/home/$USER_NAME/" \
    --network host \
    --ulimit nofile=1024:524288 \
    --name ${1}"development" \
    $IMG_NAME \
    $COMMAND
